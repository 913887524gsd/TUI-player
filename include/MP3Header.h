#pragma once

#include <cstdint>
#include <cstddef>
#include <cassert>

struct FrameHeader {
	uint16_t syncword: 12;
	uint8_t ID: 1;
	uint8_t layer: 2;
	uint8_t protection_bit: 1;
	uint8_t bitrate_index: 4;
	uint8_t sampling_frequency: 2;
	uint8_t padding_bit: 1;
	uint8_t private_bit: 1;
	uint8_t mode: 2;
	uint8_t mode_extension: 2;
	uint8_t copyright: 1;
	uint8_t copy: 1;
	uint8_t emphasis: 2;
}__attribute__((packed));
static_assert(sizeof(FrameHeader) == 4);

enum layer {
	layer1 = 3,
	layer2 = 2,
	layer3 = 1,
	layer_unknown = 0,
};

const int bitrate_table[4][16] = {
	// layer unknown
	{},
	// layer 3
	{0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1},
	// layer 2
	{0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 284, -1},
	// layer 1
	{0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1},
};

const size_t kbit = 1000;

const int sampling_frequency_table[4] = {
	[0] = 44100,
	[1] = 48000,
	[2] = 32000,
	[3] = -1,
};

const int frame_size_table[4] = {
	[0] = 0,
	[1] = 1152,
	[2] = 1152,
	[3] = 384,
};

enum mode {
	stereo = 0,
	joint_stereo = 1,
	dual_channel = 2,
	single_channel = 3,
};

// scfsi_band
// 0 -> 0-5
// 1 -> 6-10
// 2 -> 11->15
// 3 -> 16->20

const int slen1_table[16] = {
	0, 0, 0, 0, 3, 1, 1, 1,
	2, 2, 2, 3, 3, 3, 4, 4,
};
const int slen2_table[16] = {
	0, 1, 2, 3, 0, 1, 2, 3,
	1, 2, 3, 1, 2, 3, 2, 3,
};

inline static size_t get_side_info_length(FrameHeader *header)
{
    if (header->mode == single_channel) {
        return 17;
    } else {
        return 32;
    }
}

inline static size_t get_frame_length(FrameHeader *header)
{
	assert(header->bitrate_index);
	size_t bitrate = bitrate_table[header->layer][header->bitrate_index] * kbit;
	size_t frequency = sampling_frequency_table[header->sampling_frequency];
	size_t padding = header->padding_bit;
	if (header->layer == layer1) {
		return 12 * bitrate / frequency + padding * 4;
	} else {
		return 144 * bitrate / frequency + padding * 1;
	}
}

struct ID3V2Header {
	char identifier[3];
	uint8_t version[2];
	uint8_t flags;
	uint8_t size[4];	
}__attribute__((packed));
static_assert(sizeof(ID3V2Header) == 10);

#define ID3V2_IDENTIFIER "ID3"

inline static size_t get_ID3V2_length(ID3V2Header *header)
{
	return ((size_t)header->size[0] << 21) | ((size_t)header->size[1] << 14) |
		((size_t)header->size[2] << 7) | ((size_t)header->size[3]);
}

struct XingInfo {
	uint32_t frames;
	uint32_t bytes;
	//uint8_t TOC[100];
	uint32_t quality;
};

#define XING_ID_VBR "Xing"
#define XING_ID_CBR "Info"

#define XING_FRAME_FLAG		0x1
#define XING_BYTES_FLAG		0x2
#define XING_TOC_FLAG		0x4
#define XING_VBR_SCALE_FLAG 0x8

struct Layer3ChannelInfo {
	size_t part2_3_length;
    uint16_t big_values;
    uint8_t global_gain;
    uint8_t scalefac_compress;
    uint8_t window_switching_flag;
    uint8_t block_type;
    uint8_t mixed_block_flag;
    uint8_t table_select[3];
    uint8_t subblock_gain[3];
    uint8_t region0_count;
    uint8_t region1_count;
    uint8_t preflag;
    uint8_t scalefac_scale;
    uint8_t count1table_select;
};

struct Layer3SideInfo {
    size_t main_data_begin;
    uint8_t scfsi[2][4];
    Layer3ChannelInfo cinfo[2][2];
};

const int scale_band_long_table[4][21] {
	// 44.1kHZ
	{4, 4, 4, 4, 4, 4, 6, 6, 8, 8, 10, 12, 16, 20, 24, 28, 34, 42, 50, 54, 76},
	// 48kHZ
	{4, 4, 4, 4, 4, 4, 6, 6, 6, 8, 10, 12, 16, 18, 22, 28, 34, 40, 46, 54, 54},
	// 32kHZ
	{4, 4, 4, 4, 4, 4, 6, 6, 8, 10, 12, 16, 20, 24, 30, 38, 46, 56, 68, 84, 102},
	// ?
	{},
};

const int scale_band_long_acm_table[4][23] {
	// 44.1kHZ
	{0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 52, 62, 74, 90, 110, 134, 162, 196, 238, 288, 342, 418, 576},
	// 48kHZ
	{0, 4, 8, 12, 16, 20, 24, 30, 36, 42, 50, 60, 72, 88, 106, 128, 156, 190, 230, 276, 330, 384, 576},
	// 32kHZ
	{0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 54, 66, 82, 102, 126, 156, 194, 240, 296, 364, 448, 550, 576},
	// ?
	{},
};

const int scale_band_short_table[4][12] {
	// 44.1kHZ
	{4, 4, 4, 4, 6, 8, 10, 12, 14, 18, 22, 30},
	// 48kHZ
	{4, 4, 4, 4, 6, 6, 10, 12, 14, 16, 20, 26},
	// 32kHZ
	{4, 4, 4, 4, 6, 8, 12, 15, 20, 26, 34, 42},
	// ?
	{},
};

struct Layer3ChannelMainData {
	uint8_t scalefac_l[21];
	uint8_t scalefac_s[12][3];
	
	float samples[576];
};

struct Layer3MainData {
	Layer3ChannelMainData cdata[2][2];
};

const int pretab[21] = {
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1, 1, 1, 1, 2, 2, 3, 3, 3, 2,
};

union Layer3XR {
	// long window
	float l[32][18];
	// short window
	float s[32][3][6];
	// result (time)
	float r[18][32];
	// pcm
	float pcm[576];
};
static_assert(sizeof(Layer3XR) == 576 * sizeof(float));

static const double synth_D[512] {
	 0.000000000, -0.000015259, -0.000015259, -0.000015259, -0.000015259, -0.000015259,
	-0.000015259, -0.000030518, -0.000030518, -0.000030518, -0.000030518, -0.000045776,
	-0.000045776, -0.000061035, -0.000061035, -0.000076294, -0.000076294, -0.000091553,
	-0.000106812, -0.000106812, -0.000122070, -0.000137329, -0.000152588, -0.000167847,
	-0.000198364, -0.000213623, -0.000244141, -0.000259399, -0.000289917, -0.000320435,
	-0.000366211, -0.000396729, -0.000442505, -0.000473022, -0.000534058, -0.000579834,
	-0.000625610, -0.000686646, -0.000747681, -0.000808716, -0.000885010, -0.000961304,
	-0.001037598, -0.001113892, -0.001205444, -0.001296997, -0.001388550, -0.001480103,
	-0.001586914, -0.001693726, -0.001785278, -0.001907349, -0.002014160, -0.002120972,
	-0.002243042, -0.002349854, -0.002456665, -0.002578735, -0.002685547, -0.002792358,
	-0.002899170, -0.002990723, -0.003082275, -0.003173828,  0.003250122,  0.003326416,
	 0.003387451,  0.003433228,  0.003463745,  0.003479004,  0.003479004,  0.003463745,
	 0.003417969,  0.003372192,  0.003280640,  0.003173828,  0.003051758,  0.002883911,
	 0.002700806,  0.002487183,  0.002227783,  0.001937866,  0.001617432,  0.001266479,
	 0.000869751,  0.000442505, -0.000030518, -0.000549316, -0.001098633, -0.001693726,
	-0.002334595, -0.003005981, -0.003723145, -0.004486084, -0.005294800, -0.006118774,
	-0.007003784, -0.007919312, -0.008865356, -0.009841919, -0.010848999, -0.011886597,
	-0.012939453, -0.014022827, -0.015121460, -0.016235352, -0.017349243, -0.018463135,
	-0.019577026, -0.020690918, -0.021789551, -0.022857666, -0.023910522, -0.024932861,
	-0.025909424, -0.026840210, -0.027725220, -0.028533936, -0.029281616, -0.029937744,
	-0.030532837, -0.031005859, -0.031387329, -0.031661987, -0.031814575, -0.031845093,
	-0.031738281, -0.031478882,  0.031082153,  0.030517578,  0.029785156,  0.028884888,
	 0.027801514,  0.026535034,  0.025085449,  0.023422241,  0.021575928,  0.019531250,
	 0.017257690,  0.014801025,  0.012115479,  0.009231567,  0.006134033,  0.002822876,
	-0.000686646, -0.004394531, -0.008316040, -0.012420654, -0.016708374, -0.021179199,
	-0.025817871, -0.030609131, -0.035552979, -0.040634155, -0.045837402, -0.051132202,
	-0.056533813, -0.061996460, -0.067520142, -0.073059082, -0.078628540, -0.084182739,
	-0.089706421, -0.095169067, -0.100540161, -0.105819702, -0.110946655, -0.115921021,
	-0.120697021, -0.125259399, -0.129562378, -0.133590698, -0.137298584, -0.140670776,
	-0.143676758, -0.146255493, -0.148422241, -0.150115967, -0.151306152, -0.151962280,
	-0.152069092, -0.151596069, -0.150497437, -0.148773193, -0.146362305, -0.143264771,
	-0.139450073, -0.134887695, -0.129577637, -0.123474121, -0.116577148, -0.108856201,
	 0.100311279,  0.090927124,  0.080688477,  0.069595337,  0.057617188,  0.044784546,
	 0.031082153,  0.016510010,  0.001068115, -0.015228271, -0.032379150, -0.050354004,
	-0.069168091, -0.088775635, -0.109161377, -0.130310059, -0.152206421, -0.174789429,
	-0.198059082, -0.221984863, -0.246505737, -0.271591187, -0.297210693, -0.323318481,
	-0.349868774, -0.376800537, -0.404083252, -0.431655884, -0.459472656, -0.487472534,
	-0.515609741, -0.543823242, -0.572036743, -0.600219727, -0.628295898, -0.656219482,
	-0.683914185, -0.711318970, -0.738372803, -0.765029907, -0.791213989, -0.816864014,
	-0.841949463, -0.866363525, -0.890090942, -0.913055420, -0.935195923, -0.956481934,
	-0.976852417, -0.996246338, -1.014617920, -1.031936646, -1.048156738, -1.063217163,
	-1.077117920, -1.089782715, -1.101211548, -1.111373901, -1.120223999, -1.127746582,
	-1.133926392, -1.138763428, -1.142211914, -1.144287109,  1.144989014,  1.144287109,
	 1.142211914,  1.138763428,  1.133926392,  1.127746582,  1.120223999,  1.111373901,
	 1.101211548,  1.089782715,  1.077117920,  1.063217163,  1.048156738,  1.031936646,
	 1.014617920,  0.996246338,  0.976852417,  0.956481934,  0.935195923,  0.913055420,
	 0.890090942,  0.866363525,  0.841949463,  0.816864014,  0.791213989,  0.765029907,
	 0.738372803,  0.711318970,  0.683914185,  0.656219482,  0.628295898,  0.600219727,
	 0.572036743,  0.543823242,  0.515609741,  0.487472534,  0.459472656,  0.431655884,
	 0.404083252,  0.376800537,  0.349868774,  0.323318481,  0.297210693,  0.271591187,
	 0.246505737,  0.221984863,  0.198059082,  0.174789429,  0.152206421,  0.130310059,
	 0.109161377,  0.088775635,  0.069168091,  0.050354004,  0.032379150,  0.015228271,
	-0.001068115, -0.016510010, -0.031082153, -0.044784546, -0.057617188, -0.069595337,
	-0.080688477, -0.090927124,  0.100311279,  0.108856201,  0.116577148,  0.123474121,
	 0.129577637,  0.134887695,  0.139450073,  0.143264771,  0.146362305,  0.148773193,
	 0.150497437,  0.151596069,  0.152069092,  0.151962280,  0.151306152,  0.150115967,
	 0.148422241,  0.146255493,  0.143676758,  0.140670776,  0.137298584,  0.133590698,
	 0.129562378,  0.125259399,  0.120697021,  0.115921021,  0.110946655,  0.105819702,
	 0.100540161,  0.095169067,  0.089706421,  0.084182739,  0.078628540,  0.073059082,
	 0.067520142,  0.061996460,  0.056533813,  0.051132202,  0.045837402,  0.040634155,
	 0.035552979,  0.030609131,  0.025817871,  0.021179199,  0.016708374,  0.012420654,
	 0.008316040,  0.004394531,  0.000686646, -0.002822876, -0.006134033, -0.009231567,
	-0.012115479, -0.014801025, -0.017257690, -0.019531250, -0.021575928, -0.023422241,
	-0.025085449, -0.026535034, -0.027801514, -0.028884888, -0.029785156, -0.030517578,
	 0.031082153,  0.031478882,  0.031738281,  0.031845093,  0.031814575,  0.031661987,
	 0.031387329,  0.031005859,  0.030532837,  0.029937744,  0.029281616,  0.028533936,
	 0.027725220,  0.026840210,  0.025909424,  0.024932861,  0.023910522,  0.022857666,
	 0.021789551,  0.020690918,  0.019577026,  0.018463135,  0.017349243,  0.016235352,
	 0.015121460,  0.014022827,  0.012939453,  0.011886597,  0.010848999,  0.009841919,
	 0.008865356,  0.007919312,  0.007003784,  0.006118774,  0.005294800,  0.004486084,
	 0.003723145,  0.003005981,  0.002334595,  0.001693726,  0.001098633,  0.000549316,
	 0.000030518, -0.000442505, -0.000869751, -0.001266479, -0.001617432, -0.001937866,
	-0.002227783, -0.002487183, -0.002700806, -0.002883911, -0.003051758, -0.003173828,
	-0.003280640, -0.003372192, -0.003417969, -0.003463745, -0.003479004, -0.003479004,
	-0.003463745, -0.003433228, -0.003387451, -0.003326416,  0.003250122,  0.003173828,
	 0.003082275,  0.002990723,  0.002899170,  0.002792358,  0.002685547,  0.002578735,
	 0.002456665,  0.002349854,  0.002243042,  0.002120972,  0.002014160,  0.001907349,
	 0.001785278,  0.001693726,  0.001586914,  0.001480103,  0.001388550,  0.001296997,
	 0.001205444,  0.001113892,  0.001037598,  0.000961304,  0.000885010,  0.000808716,
	 0.000747681,  0.000686646,  0.000625610,  0.000579834,  0.000534058,  0.000473022,
	 0.000442505,  0.000396729,  0.000366211,  0.000320435,  0.000289917,  0.000259399,
	 0.000244141,  0.000213623,  0.000198364,  0.000167847,  0.000152588,  0.000137329,
	 0.000122070,  0.000106812,  0.000106812,  0.000091553,  0.000076294,  0.000076294,
	 0.000061035,  0.000061035,  0.000045776,  0.000045776,  0.000030518,  0.000030518,
	 0.000030518,  0.000030518,  0.000015259,  0.000015259,  0.000015259,  0.000015259,
	 0.000015259,  0.000015259
};
